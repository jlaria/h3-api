from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel, Field
from shapely.ops import transform
from typing import List, Dict, Any
import shapely.geometry
import h3

# Create FastAPI instance
app = FastAPI()

# Define the request schema with an example
class PolyfillRequest(BaseModel):
    geojson: Dict[str, Any] = Field(
        ...,
        example={
            "type": "Polygon",
            "coordinates": [
                [
                    [-122.4089866999972145, 37.783541431860305],
                    [-122.40901552734375, 37.7835471973571],
                    [-122.40902817285156, 37.7835471973571],
                    [-122.40902817285156, 37.783541431860305],
                    [-122.4089866999972145, 37.783541431860305]
                ]
            ]
        }
    )

# Define the response schema
class PolyfillResponse(BaseModel):
    h3_indexes: List[str]

def cell_to_wkt(cell):
    boundary = list(h3.cell_to_boundary(cell))
    boundary.append(boundary[0])
    poly = shapely.geometry.Polygon(boundary)
    poly = transform(lambda x,y: (y,x), poly)
    return poly.wkt

@app.post("/polyfill", response_model=PolyfillResponse)
async def polyfill(request: PolyfillRequest, resolution: int = Query(..., ge=0, le=15)):
    """
    Endpoint to polyfill a GeoJSON polygon with H3 indexes at a given resolution.
    """
    try:
        # Convert GeoJSON to shapely geometry
        poly = shapely.geometry.shape(request.geojson)
        poly = h3.geo_to_h3shape(poly)
        cells = h3.polygon_to_cells(poly, resolution)
        polygons = [cell_to_wkt(x) for x in cells]

        return PolyfillResponse(h3_indexes=list(polygons))

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# Health check endpoint
@app.get("/")
def health_check():
    """
    Health check endpoint to verify API is running.
    """
    return {"status": "ok", "message": "H3 Polyfill API is running."}